# -*- coding: utf-8 -*-
"""Population.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S1oMSaU7ywbtK15zUmf2LrL86RGvZ3ex
"""

# Mount google drive
from google.colab import drive
drive.mount('/content/drive')

"""# Import Library"""

!pip install geopandas

import pandas as pd
import re
import geopandas as gpd
from shapely import wkt

"""# Read Data"""

pop_data = pd.read_csv('/content/drive/MyDrive/IE/WomanData/2021Census_G01_VIC_SAL.csv')
pop_data.head()

pop_meta_data = pd.read_excel('/content/drive/MyDrive/IE/WomanData/2021Census_geog_desc_1st_release.xlsx', sheet_name = '2021_ASGS_Non_ABS_Structures')
pop_meta_data.head()

"""# Cleaning"""

# select needed column
pop_data = pop_data.iloc[:, :4]
pop_data.head()

# check duplicate or missing
pop_data.isnull().any()

# check duplicated data
pop_data[pop_data.duplicated()]

# filter to SAL
pop_meta_data = pop_meta_data[pop_meta_data['ASGS_Structure'] == 'SAL']

"""## check missing or duplicated"""

pop_meta_data.isnull().any()

pop_meta_data.duplicated().any()

pop_meta_data = pop_meta_data.reset_index()
pop_meta_data.head()

# convert to dictionary
SAL_dict = dict()
for i in range(len(pop_meta_data)):
  # pop_meta_data['Census_Name_2021'][i]
  SAL_dict[pop_meta_data['Census_Code_2021'][i]] = re.sub("[\(\[].*?[\)\]]", "", pop_meta_data['Census_Name_2021'][i]).strip()

# impute SAL name to pop_data
pop_data['Suburb'] = pop_data.apply(lambda x: SAL_dict[x['SAL_CODE_2021']], axis=1)
pop_data.head()

# read location data
df_loc = pd.read_csv('/content/drive/MyDrive/IE/CleanData/db_postcode_data.csv', sep=';')

# convert data type
df_loc['geometry'] = df_loc['geometry'].apply(wkt.loads)
df_loc = gpd.GeoDataFrame(df_loc, crs='epsg:4326')
df_loc['postcode'] = df_loc['postcode'].astype(int)

# read crime data
df_crime = pd.read_csv('/content/drive/MyDrive/IE/CleanData/db_crime_data.csv', sep=';')

# drop unnamed: 0 column
df_crime = df_crime.drop(['id'], axis =1)
df_crime.head()

# join data
df = df_loc.join(df_crime.set_index('id_loc'), on='id')
df = df.drop(['id'], axis =1)

df[df['Year'].isnull()]
df['Year'].fillna(0, inplace=True)
df['Offence Subdivision'].fillna(0, inplace=True)
df['Incidents Recorded'].fillna(0, inplace=True)
df.head()

"""# Calculate crime rate
dividing the number of reported crimes by the total population. The result is then multiplied by 100,000.
"""

# convert to dictionary
# suburb_pop = dict()
# for i in range(len(pop_meta_data)):
#   # pop_meta_data['Census_Name_2021'][i]
#   SAL_dict[pop_meta_data['Census_Code_2021'][i]] = re.sub("[\(\[].*?[\)\]]", "", pop_meta_data['Census_Name_2021'][i]).strip
# int(pop_data[pop_data['Suburb'] == 'Stony Creek']['Tot_P_P'])
# pop_data[pop_data['Suburb'] == 'Stony Creek']['Tot_P_P']
pop_data[pop_data['Suburb'] == 'Stony Creek']

df[df['LOC_NAME'] == 'Bridgewater on Loddon']

zero_sub = pop_data[pop_data['Tot_P_P'] == 0]['Suburb'].to_list()
pop_sub =  pop_data['Suburb'].to_list()
subs = df['LOC_NAME'].to_list()
for i in subs:
  if i not in pop_sub:
    print(i)

# def calculate_rate(records, suburb):
#   if suburb in pop_data['Suburb'].to_list():
#     if pop_data[pop_data['Suburb'] == suburb]['Tot_P_P'] == 0:
#       return -1
#       return records * 100000 / pop_data[pop_data['Suburb'] == suburb]['Tot_P_P']+1
#   else:
#     return -1

# join data with population
df['crime_rate'] = df.apply(lambda x: x['Incidents Recorded'] * 100000 / max(pop_data[pop_data['Suburb'] == x['LOC_NAME']]['Tot_P_P']+1) if x['LOC_NAME'] in pop_data['Suburb'].to_list() else -1 , axis=1)
# df['crime_rate'] = df.apply(calculate_rate())
df.head()

"""# export csv"""

df.to_csv('/content/drive/MyDrive/IE/WomanData/df_crime_rate.csv')

